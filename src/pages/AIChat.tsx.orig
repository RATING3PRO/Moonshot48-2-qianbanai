import React, { useState, useRef, useEffect } from 'react';
import { Button, Input, Avatar, Space, Toast, SpinLoading, Selector, ImageUploader } from 'antd-mobile';
import { PictureOutline } from 'antd-mobile-icons';
import { WeatherService } from '../services/weatherService';
import { OllamaService } from '../services/ollamaService';
import { OLLAMA_API } from '../config/api';

// Web Speech API类型声明
declare global {
  interface Window {
    webkitSpeechRecognition: any;
    SpeechRecognition: any;
  }
}

// SpeechRecognition类型
type SpeechRecognition = any;

// 图标组件
const SendIcon = () => <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/></svg>;
const MicIcon = () => <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z"/></svg>;
const StopIcon = () => <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M6 6h12v12H6z"/></svg>;

// 消息类型定义
interface Message {
  id: number;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  imageUrl?: string; // 添加图片URL字段
}

// 聊天消息接口，用于构建Ollama的消息历史
interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

// 语音识别事件接口
interface SpeechRecognitionEvent {
  results: {
    [index: number]: {
      [index: number]: {
        transcript: string;
      }
    }
  };
  error: {
    error: string;
  };
}

const AIChat: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: '您好！我是您的本地AI助手，有什么我可以帮您的吗？',
      sender: 'ai',
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [isAIResponding, setIsAIResponding] = useState(false);
  const [availableModels, setAvailableModels] = useState<string[]>([]);
  const [selectedModel, setSelectedModel] = useState(OLLAMA_API.MODEL);
  const [serviceStatus, setServiceStatus] = useState<{connected: boolean, message: string}>({connected: false, message: '正在检查Ollama服务...'});
  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([
    { role: 'system', content: '你是一个专为老年人设计的AI助手。请遵循以下规则：1. 使用简单、清晰、尊重的语言；2. 避免使用技术术语，如需使用，请简明解释；3. 回答要简短、直接，重点突出；4. 提供实用的健康和生活建议；5. 保持耐心和友好，语气温和。' }
  ]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  
  // 自动滚动到最新消息
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  // 检查Ollama服务状态
  useEffect(() => {
    const checkOllamaService = async () => {
      try {
        // 测试连接
        const connectionTest = await OllamaService.testConnection();
        setServiceStatus({
          connected: connectionTest.success,
          message: connectionTest.message
        });
        
        if (connectionTest.success) {
          // 连接成功后加载模型列表
          loadModels();
        } else {
          // 连接失败，添加AI消息提示用户
          setMessages(prev => [
            ...prev, 
            {
              id: prev.length + 1,
              text: `⚠️ ${connectionTest.message}\n\n请确保Ollama服务已启动，并重新加载页面重试。如何启动Ollama:\n1. 打开命令提示符\n2. 输入 'ollama serve' 启动服务\n3. 确保已安装${OLLAMA_API.MODEL}模型（运行'ollama pull ${OLLAMA_API.MODEL}'）`,
              sender: 'ai',
              timestamp: new Date()
            }
          ]);
        }
      } catch (error) {
        console.error('检查Ollama服务出错:', error);
        setServiceStatus({
          connected: false,
          message: `检查服务失败: ${error instanceof Error ? error.message : String(error)}`
        });
      }
    };
    
    checkOllamaService();
  }, []);
  
  // 加载可用模型
  const loadModels = async () => {
    try {
      const models = await OllamaService.getModels();
      if (models.length > 0) {
        setAvailableModels(models);
        
        // 检查当前设置的模型是否在可用列表中
        if (!models.includes(OLLAMA_API.MODEL)) {
          setMessages(prev => [
            ...prev, 
            {
              id: prev.length + 1,
              text: `⚠️ 配置的默认模型 "${OLLAMA_API.MODEL}" 未在Ollama中找到。\n请运行命令 'ollama pull ${OLLAMA_API.MODEL}' 下载该模型，或从下方选择其他可用模型。`,
              sender: 'ai',
              timestamp: new Date()
            }
          ]);
        }
      } else {
        setMessages(prev => [
          ...prev, 
          {
            id: prev.length + 1,
            text: `⚠️ 未找到任何可用的模型。请确保已下载至少一个模型，可以运行命令:\nollama pull ${OLLAMA_API.MODEL}`,
            sender: 'ai',
            timestamp: new Date()
          }
        ]);
      }
    } catch (error) {
      console.error('加载模型列表失败:', error);
      setMessages(prev => [
        ...prev, 
        {
          id: prev.length + 1,
          text: `⚠️ 获取模型列表失败: ${error instanceof Error ? error.message : String(error)}`,
          sender: 'ai',
          timestamp: new Date()
        }
      ]);
    }
  };
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  // 处理图片上传
  const handleImageUpload = (file: File) => {
    return new Promise<string>((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const dataUrl = reader.result as string;
        setImageUrl(dataUrl);
        resolve(dataUrl);
      };
      reader.onerror = () => reject(new Error('读取图片失败'));
      reader.readAsDataURL(file);
    });
  };
  
  // 发送消息
  const sendMessage = () => {
    if ((!inputText.trim() && !imageUrl) && !isRecording) return;
    
    // 如果Ollama服务未连接，提示用户
    if (!serviceStatus.connected) {
      Toast.show({
        content: '无法连接到Ollama服务。请确保服务已启动并刷新页面。',
        position: 'center'
      });
      return;
    }
    
    // 构建消息文本
    const messageText = inputText.trim() || (imageUrl ? '我发送了一张图片' : '');
    
    // 添加用户消息
    const userMessage: Message = {
      id: messages.length + 1,
      text: messageText,
      sender: 'user',
      timestamp: new Date(),
      imageUrl: imageUrl || undefined
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setImageUrl(null);
    
    // 添加用户消息到聊天历史
    let userContent = messageText;
    if (imageUrl) {
      userContent += imageUrl ? ' [图片已上传]' : '';
    }
    
    const userChatMessage: ChatMessage = {
      role: 'user',
      content: userContent
    };
    const updatedHistory = [...chatHistory, userChatMessage];
    setChatHistory(updatedHistory);
    
    // 调用AI生成响应
    handleAIResponse(userContent, updatedHistory);
  };
  
  // 处理AI响应
  const handleAIResponse = async (userText: string, history: ChatMessage[]) => {
    setIsAIResponding(true);
    
    try {
      // 检查是否是天气查询
      if (userText.includes('天气')) {
        try {
          // 提取城市名称，默认为北京
          let cityName = '北京';
          const cityMatch = userText.match(/([\u4e00-\u9fa5]{2,}市?|[\u4e00-\u9fa5]{2,}县)的?天气/);
          if (cityMatch && cityMatch[1]) {
            cityName = cityMatch[1].replace(/市$|县$/, '');
          }
          
          // 调用天气服务获取天气信息
          const weatherInfo = await WeatherService.getWeatherInfo(cityName);
          const weatherResponse = WeatherService.generateWeatherReply(weatherInfo, cityName);
          
          addAIResponse(weatherResponse, history);
        } catch (error) {
          console.error('获取天气信息失败:', error);
          const response = await OllamaService.sendMessage(userText, history.slice(0, -1), selectedModel);
          addAIResponse(response, history);
        }
      } else {
        // 使用Ollama API处理一般查询
        const response = await OllamaService.sendMessage(userText, history.slice(0, -1), selectedModel);
        addAIResponse(response, history);
      }
    } catch (error) {
      console.error('生成AI回复失败:', error);
      
      // 处理错误情况
      const errorMessage = '抱歉，与本地AI服务通信时出现了问题，请确保Ollama服务正在运行。';
      addAIResponse(errorMessage, history);
    }
  };
  
  // 添加AI响应到消息列表和聊天历史
  const addAIResponse = (responseText: string, history: ChatMessage[]) => {
    // 添加AI回复到消息列表
    const aiMessage: Message = {
      id: messages.length + 2,
      text: responseText,
      sender: 'ai',
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, aiMessage]);
    
    // 添加AI回复到聊天历史
    const aiChatMessage: ChatMessage = {
      role: 'assistant',
      content: responseText
    };
    setChatHistory([...history, aiChatMessage]);
    
    setIsAIResponding(false);
    
    // 语音播报AI回复
    speakText(responseText);
  };
  
  // 语音识别实例
  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null);
  
  // 初始化语音识别
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      
      recognitionInstance.continuous = false;
      recognitionInstance.interimResults = false;
      recognitionInstance.lang = 'zh-CN';
      
      recognitionInstance.onresult = (event: SpeechRecognitionEvent) => {
        const transcript = event.results[0][0].transcript;
        setInputText(transcript);
        setIsRecording(false);
      };
      
      recognitionInstance.onerror = (event: SpeechRecognitionEvent) => {
        console.error('语音识别错误:', event.error);
        setIsRecording(false);
        Toast.show({
          content: '语音识别失败，请重试',
          position: 'bottom'
        });
      };
      
      setRecognition(recognitionInstance);
    } else {
      console.warn('此浏览器不支持Web Speech API');
    }
    
    return () => {
      if (recognition) {
        try {
          recognition.stop();
        } catch (e) {
          // 忽略错误
        }
      }
    };
  }, []);
  
  // 处理语音输入
  const handleVoiceInput = () => {
    if (!recognition) {
      Toast.show({
        content: '您的浏览器不支持语音识别',
        position: 'bottom'
      });
      return;
    }
    
    if (isRecording) {
      recognition.stop();
      setIsRecording(false);
    } else {
      recognition.start();
      setIsRecording(true);
    }
  };
  
  // 语音朗读文本
  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'zh-CN';
      utterance.rate = 0.9; // 速度略慢，适合老年人
      window.speechSynthesis.speak(utterance);
    }
  };
  
  // 格式化时间显示
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
  };
  
  // 处理模型切换
  const handleModelChange = (value: string[]) => {
    if (value && value.length > 0) {
      setSelectedModel(value[0]);
      Toast.show({
        content: `已切换到模型: ${value[0]}`,
        position: 'bottom'
      });
    }
  };
  
  return (
    <div className="ai-chat-container">
      <h1 className="page-title">本地AI助手</h1>
      
      {/* 服务状态信息 */}
      {!serviceStatus.connected && (
        <div className="service-status error">
          <p>⚠️ {serviceStatus.message}</p>
          <p>请确保Ollama服务正在运行，并已下载所需模型。</p>
        </div>
      )}
      
      {/* 模型选择器 */}
      {availableModels.length > 0 && (
        <div className="model-selector">
          <Selector
            options={availableModels.map(model => ({
              label: model,
              value: model
            }))}
            value={[selectedModel]}
            onChange={handleModelChange}
          />
        </div>
      )}
      
      {/* 消息列表 */}
      <div className="messages-container">
        {messages.map((message) => (
          <div key={message.id} className={`message ${message.sender}`}>
            <div className="message-avatar">
              <Avatar src={message.sender === 'ai' ? '/ai-avatar.png' : '/user-avatar.png'} />
            </div>
            <div className="message-content">
              <div className="message-bubble">
                {message.imageUrl && (
                  <div className="message-image">
                    <img src={message.imageUrl} alt="用户上传" />
                  </div>
                )}
                <div className="message-text">{message.text}</div>
              </div>
              <div className="message-time">{formatTime(message.timestamp)}</div>
            </div>
          </div>
        ))}
        
        {isAIResponding && (
          <div className="message ai typing">
            <div className="message-avatar">
              <Avatar src="/ai-avatar.png" />
            </div>
            <div className="message-content">
              <div className="message-bubble">
                <SpinLoading color="#4A90E2" />
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>
      
      {/* 输入区域 */}
      <div className="input-container">
        <div className="image-upload-container">
          <ImageUploader
            value={imageUrl ? [{ url: imageUrl }] : []}
            onChange={files => {
              if (files.length === 0) {
                setImageUrl(null);
              }
            }}
            upload={async file => {
              const url = await handleImageUpload(file);
              return { url };
            }}
            maxCount={1}
            showUpload={imageUrl === null}
            preview={true}
          >
            <div className="upload-button">
              <PictureOutline fontSize={24} />
            </div>
          </ImageUploader>
        </div>
        
        <div className="input-wrapper">
          <Input
            className="message-input"
            placeholder="请输入消息..."
            value={inputText}
            onChange={setInputText}
            onEnterPress={sendMessage}
          />
          
          <Space>
            <Button 
              className="voice-btn"
              onClick={handleVoiceInput}
            >
              {isRecording ? <StopIcon /> : <MicIcon />}
            </Button>
            
            <Button 
              className="send-btn"
              onClick={sendMessage}
              disabled={isAIResponding || (!inputText.trim() && !imageUrl)}
            >
              <SendIcon />
            </Button>
          </Space>
        </div>
      </div>
      
      <style>
        {`
        .ai-chat-container {
          display: flex;
          flex-direction: column;
          height: 100vh;
          padding: 16px;
          background-color: #f5f5f5;
        }
        
        .page-title {
          text-align: center;
          margin-bottom: 16px;
          font-size: 24px;
          color: #333;
        }
        
        .model-selector {
          margin-bottom: 16px;
        }
        
        .messages-container {
          flex: 1;
          overflow-y: auto;
          padding: 8px;
          margin-bottom: 16px;
        }
        
        .message {
          display: flex;
          margin-bottom: 16px;
          max-width: 80%;
        }
        
        .message.user {
          flex-direction: row-reverse;
          margin-left: auto;
        }
        
        .message-avatar {
          margin: 0 8px;
        }
        
        .message-content {
          display: flex;
          flex-direction: column;
        }
        
        .message.user .message-content {
          align-items: flex-end;
        }
        
        .message-bubble {
          padding: 12px;
          border-radius: 16px;
          max-width: 100%;
          word-wrap: break-word;
        }
        
        .message.ai .message-bubble {
          background-color: white;
          border: 1px solid #e0e0e0;
        }
        
        .message.user .message-bubble {
          background-color: #4A90E2;
          color: white;
        }
        
        .message-image {
          margin-bottom: 8px;
        }
        
        .message-image img {
          max-width: 200px;
          max-height: 200px;
          border-radius: 8px;
        }
        
        .message-text {
          white-space: pre-wrap;
          line-height: 1.5;
        }
        
        .message-time {
          font-size: 12px;
          color: #999;
          margin-top: 4px;
        }
        
        .message.typing .message-bubble {
          padding: 16px;
          min-width: 60px;
          display: flex;
          justify-content: center;
        }
        
        .input-container {
          padding: 8px;
          background-color: white;
          border-radius: 16px;
          border: 1px solid #e0e0e0;
        }
        
        .image-upload-container {
          margin-bottom: 8px;
        }
        
        .upload-button {
          display: flex;
          justify-content: center;
          align-items: center;
          width: 40px;
          height: 40px;
          color: #4A90E2;
        }
        
        .input-wrapper {
          display: flex;
          align-items: center;
        }
        
        .message-input {
          flex: 1;
          --font-size: 16px;
          --placeholder-color: #999;
        }
        
        .voice-btn, .send-btn {
          width: 44px;
          height: 44px;
          display: flex;
          justify-content: center;
          align-items: center;
          color: white;
          background-color: #4A90E2;
          border-radius: 50%;
          margin-left: 8px;
        }
        
        .voice-btn:disabled, .send-btn:disabled {
          background-color: #cccccc;
        }
        
        .service-status {
          margin-bottom: 16px;
          padding: 12px;
          border-radius: 8px;
          text-align: center;
        }
        
        .service-status.error {
          background-color: #ffeeee;
          border: 1px solid #ff6b6b;
          color: #d32f2f;
        }
        `}
      </style>
    </div>
  );
};

export default AIChat; 